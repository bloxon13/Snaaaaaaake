/*
 * This is SnakeGame_Draft
 *  
 */

#include <Adafruit_GFX.h>
#include <Adafruit_NeoMatrix.h>
#include <Adafruit_NeoPixel.h>

#define PIN 12
#define UP 2
#define DOWN 3
#define LEFT 20
#define RIGHT 21

Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(8, 8, PIN,
  NEO_MATRIX_TOP     + NEO_MATRIX_RIGHT +
  NEO_MATRIX_COLUMNS + NEO_MATRIX_PROGRESSIVE,
  NEO_GRB            + NEO_KHZ800);

#define green matrix.Color(0, 255, 0)
#define red matrix.Color(255, 0, 0)
#define purple matrix.Color(255, 0, 255)

volatile int direc = 2;

int boardOutputArray[8][8] {
  {0,0,0,0,0,0,0,0},
  {0,1,0,0,0,0,0,0},
  {0,0,0,0,0,0,5,0},
  {0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0}
};

int snakeHead[2] {1,1};
int snakeBody[2][63];
int snakeLength = 0;
int x0;
int y0;
bool working;
void setup() {
  pinMode(UP, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(UP), goUp, LOW);
  pinMode(DOWN, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(DOWN), goDown, LOW);
  pinMode(LEFT, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(LEFT), goLeft, LOW);
  pinMode(RIGHT, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(RIGHT), goRight, LOW);
  matrix.begin(); 
  matrix.setBrightness(10);
}

void loop() {
  
  moveSnakeHead(direc);
  snakeHeadCheck();
  foodCheck();
  //storeSnakePos();
  drawSnake();
  delay(900);
  matrix.fillScreen(0);
  matrix.show();
  delay(100);
}

void storeSnakePos() {
  if (snakeLength > 0) {
    for (int i= snakeLength-1; i <=0; i--) {
      snakeBody[0][i] = snakeBody[0][i-1];
      snakeBody[1][i] = snakeBody[1][i-1];
    }
    snakeHead[0] = snakeBody[0][0];
    snakeHead[1] = snakeBody[1][0];
  }
}

void moveSnakeHead(int direc) {
  //up
  if (direc == 0) {
    boardOutputArray[snakeHead[0]][snakeHead[1]] = 0;
    snakeHead[1]+=1;
    boardOutputArray[snakeHead[0]][snakeHead[1]] = 1;
  }
  //down
  if (direc == 1) {
    boardOutputArray[snakeHead[0]][snakeHead[1]] = 0;
    snakeHead[1]-=1;
    boardOutputArray[snakeHead[0]][snakeHead[1]] = 1;
  }
  //right
  if (direc == 2) {
    boardOutputArray[snakeHead[0]][snakeHead[1]] = 0;
    snakeHead[0]+=1;
    boardOutputArray[snakeHead[0]][snakeHead[1]] = 1;
  }
  //left
  if (direc == 3) {
    boardOutputArray[snakeHead[0]][snakeHead[1]] = 0;
    snakeHead[0]-=1;
    boardOutputArray[snakeHead[0]][snakeHead[1]] = 1;
  }
}

void drawSnake() {
  matrix.fillScreen(0);
  for(int x = 0; x <= 7; x++){
    for(int y=0; y<=7; y++) {
      if (boardOutputArray[x][y]==1){
        if (y==1 || y==3 || y==5 || y==7){
          matrix.drawPixel(y,7-x,green);
          matrix.show();          
        }
        else {
          matrix.drawPixel(y,x,green);
          matrix.show();        
        }
      }
      if (boardOutputArray[x][y]==5){
        if (y==1 || y==3 || y==5 || y==7){
          matrix.drawPixel(y,7-x,red);
          matrix.show();          
        }
        else {
          matrix.drawPixel(y,x,red);
          matrix.show();        
        }
      }
    }
  }
}

void snakeHeadCheck(){
  if(snakeHead[0] < 0 || snakeHead[1] < 0 || snakeHead[0] > 7 || snakeHead[1] > 7){
    lose();
  }
}

void foodGeneration(){
  x0 = random(1,8);
  y0 = random(1,8);
  working = false;
  while (working != true){
    if (boardOutputArray[x0-1][y0-1] = 0){
      working = true;
    } 
    else {
      x0 = random(1,8);
      y0 = random(1,8);
    }
  }
  boardOutputArray[x0-1][y0-1] = 5;
}

void foodCheck(){
  if(boardOutputArray[snakeHead[0]][snakeHead[1]]=6){
    snakeLength+=1;
    foodGeneration();
  } else{}
}

void lose() {
  for (int i = 0; i <= 999; i++){
    for (int x = 0; x<8; x++){
      for (int y = 0; y<8; y++){
        matrix.drawPixel(y,x,red);
      }
    }
    matrix.show();
    delay(300);
    matrix.fillScreen(0);
    matrix.show();
    delay(300);
  }
  
}

void goUp() {
  direc = 0;
}
void goDown() {
  direc = 1;
}
void goRight() {
  direc = 2;
}
void goLeft() {
  direc = 3;
}
